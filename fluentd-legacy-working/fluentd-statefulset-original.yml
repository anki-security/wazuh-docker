---
# Fluentd 1.19 StatefulSet (Separate from Wazuh Manager)
# This creates a standalone Fluentd deployment per client namespace
# OpenSearch compatible - no license check issues

- name: "Create {{ ansible_k8s_namespace }} Fluentd service (headless)"
  k8s:
    validate_certs: false
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: fluentd
        namespace: "{{ ansible_k8s_namespace }}"
        labels:
          app: fluentd
          client: "{{ ansible_k8s_namespace }}"
      spec:
        type: ClusterIP
        clusterIP: None
        selector:
          app: fluentd
        ports:
        - name: mikrotik-syslog
          port: 30514
          targetPort: 30514
          protocol: UDP

# NodePort service removed - using hostPort in StatefulSet instead
# This allows each client node to use the same port (30154) since pods are scheduled on different nodes

- name: "Create {{ ansible_k8s_namespace }} Fluentd StatefulSet"
  k8s:
    validate_certs: false
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    state: present
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: fluentd
        namespace: "{{ ansible_k8s_namespace }}"
        labels:
          app: fluentd
          client: "{{ ansible_k8s_namespace }}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: fluentd
        serviceName: fluentd
        template:
          metadata:
            labels:
              app: fluentd
              client: "{{ ansible_k8s_namespace }}"
          spec:
            # Use host network to bind directly to node's port 30154
            hostNetwork: true
            dnsPolicy: ClusterFirstWithHostNet
            
            nodeSelector:
              wazuh-client-id: "{{ ansible_k8s_namespace }}"
            
            # Init container to set up ingest pipelines
            initContainers:
            - name: setup-pipelines
              image: curlimages/curl:latest
              command: ["/bin/sh"]
              args:
                - -c
                - |
                  echo "üîß Setting up Elasticsearch ingest pipelines..."
                  
                  # Wait for indexer to be ready
                  until curl -k -u "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}" \
                    "https://wazuh-indexer.{{ ansible_k8s_namespace }}.svc.cluster.local:9200/_cluster/health?wait_for_status=yellow&timeout=60s" \
                    > /dev/null 2>&1; do
                    echo "‚è≥ Waiting for Elasticsearch to be ready..."
                    sleep 5
                  done
                  
                  echo "‚úÖ Elasticsearch is ready!"
                  
                  # Create MikroTik ingest pipeline if it doesn't exist
                  if [ -f "/pipelines/mikrotik-pipeline.json" ]; then
                    echo "üìã Creating MikroTik ingest pipeline..."
                    curl -k -X PUT \
                      -u "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}" \
                      -H "Content-Type: application/json" \
                      "https://wazuh-indexer.{{ ansible_k8s_namespace }}.svc.cluster.local:9200/_ingest/pipeline/mikrotik-routeros" \
                      -d @/pipelines/mikrotik-pipeline.json
                  fi
                  
                  echo "‚úÖ Pipeline setup completed!"
              env:
              - name: ELASTICSEARCH_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: indexer-cred
                    key: INDEXER_USERNAME
              - name: ELASTICSEARCH_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: indexer-cred
                    key: INDEXER_PASSWORD
              volumeMounts:
              - name: pipelines
                mountPath: /pipelines
                readOnly: true
            
            volumes:
            - name: fluentd-config
              configMap:
                name: fluentd-config
            - name: pipelines
              configMap:
                name: filebeat-pipelines
            - name: fluentd-buffer
              emptyDir: {}
            
            containers:
            - name: fluentd
              image: fluent/fluentd-kubernetes-daemonset:v1.17-debian-opensearch-1
              resources:
                requests:
                  cpu: "{{ filebeat_cpu_request | default('100m') }}"
                  memory: "{{ filebeat_memory_request | default('256Mi') }}"
                limits:
                  cpu: "{{ filebeat_cpu_limit | default('500m') }}"
                  memory: "{{ filebeat_memory_limit | default('512Mi') }}"
              securityContext:
                runAsUser: 0
                capabilities:
                  add:
                  - NET_BIND_SERVICE
              volumeMounts:
              - name: fluentd-config
                mountPath: /fluentd/etc/fluent.conf
                subPath: fluent.conf
                readOnly: true
              - name: fluentd-buffer
                mountPath: /fluentd/buffer
              - name: fluentd-data
                mountPath: /fluentd/log
              ports:
              - containerPort: 30514
                name: syslog-udp
                protocol: UDP
              env:
              - name: TZ
                value: "{{ client_timezone | default(default_timezone) | default('UTC') }}"
              - name: ELASTICSEARCH_HOST
                value: "wazuh-indexer.{{ ansible_k8s_namespace }}.svc.cluster.local:9200"
              - name: ELASTICSEARCH_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: indexer-cred
                    key: INDEXER_USERNAME
              - name: ELASTICSEARCH_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: indexer-cred
                    key: INDEXER_PASSWORD
              - name: NODE_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
              - name: POD_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: POD_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
        
        volumeClaimTemplates:
        - metadata:
            name: fluentd-data
            namespace: "{{ ansible_k8s_namespace }}"
          spec:
            accessModes:
            - ReadWriteOnce
            storageClassName: "{{ filebeat_storage_class | default('local-path') }}"
            resources:
              requests:
                storage: "{{ filebeat_storage_size | default('2Gi') }}"
