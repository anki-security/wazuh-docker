name: Bump Wazuh Manager Version

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read current version
        id: current_version
        run: |
          cd wazuh-manager
          CURRENT_VERSION=$(cat VERSION)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
          
      - name: Bump version
        id: bump_version
        run: |
          cd wazuh-manager
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          case "${{ github.event.inputs.bump_type }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          
          NEW_VERSION="${major}.${minor}.${patch}"
          echo "$NEW_VERSION" > VERSION
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped version: $CURRENT_VERSION -> $NEW_VERSION"
          
      - name: Update CHANGELOG
        run: |
          cd wazuh-manager
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Create new changelog entry
          cat > CHANGELOG.tmp << 'EOF'
          # Changelog
          
          EOF
          echo "## [$NEW_VERSION] - $DATE" >> CHANGELOG.tmp
          echo "" >> CHANGELOG.tmp
          echo "### Changed" >> CHANGELOG.tmp
          echo "- Version bump to $NEW_VERSION" >> CHANGELOG.tmp
          echo "" >> CHANGELOG.tmp
          tail -n +2 CHANGELOG.md >> CHANGELOG.tmp
          mv CHANGELOG.tmp CHANGELOG.md

      - name: Commit version bump
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add wazuh-manager/VERSION wazuh-manager/CHANGELOG.md
          git commit -m "chore(wazuh-manager): bump version to ${{ steps.bump_version.outputs.new_version }}"
          git tag -a "wazuh-manager-v${{ steps.bump_version.outputs.new_version }}" -m "Release wazuh-manager v${{ steps.bump_version.outputs.new_version }}"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: true
      
      - name: Package configs
        run: |
          cd wazuh-manager
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          
          # Create release package
          mkdir -p release
          
          # Copy configs
          cp -r config/decoders release/
          cp -r config/rules release/
          cp config/filebeat-config.yml release/
          cp test-rules.sh release/
          cp -r test-logs release/
          cp README-TESTING.md release/
          cp VERSION release/
          cp CHANGELOG.md release/
          
          # Create README for the package
          cat > release/README.md << 'EOF'
          # Wazuh Manager Configurations
          
          Version: $NEW_VERSION
          
          ## Contents
          
          - `decoders/` - JSON decoders for MikroTik and ESXi
          - `rules/` - Security rules with MITRE ATT&CK mappings
          - `filebeat-config.yml` - Filebeat configuration for sensor filtering
          - `test-rules.sh` - Local testing script
          - `test-logs/` - Sample logs for testing
          - `README-TESTING.md` - Testing guide
          
          ## Quick Deploy
          
          ```bash
          # Deploy decoders
          docker cp decoders/*.xml wazuh-manager:/var/ossec/etc/decoders/
          
          # Deploy rules
          docker cp rules/*.xml wazuh-manager:/var/ossec/etc/rules/
          
          # Restart Wazuh Manager
          docker exec wazuh-manager /var/ossec/bin/wazuh-control restart
          ```
          
          ## Testing
          
          ```bash
          ./test-rules.sh validate
          ./test-rules.sh quick
          ```
          EOF
          
          # Create tarball
          tar -czf wazuh-manager-configs-v${NEW_VERSION}.tar.gz -C release .
          
          # Create checksums
          sha256sum wazuh-manager-configs-v${NEW_VERSION}.tar.gz > wazuh-manager-configs-v${NEW_VERSION}.tar.gz.sha256
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: wazuh-manager-v${{ steps.bump_version.outputs.new_version }}
          name: Wazuh Manager Configs v${{ steps.bump_version.outputs.new_version }}
          body: |
            ## Wazuh Manager Configurations v${{ steps.bump_version.outputs.new_version }}
            
            **Security Rules & Decoders** - MikroTik & ESXi
            
            ### Components
            - üìã JSON Decoders (MikroTik, ESXi)
            - üõ°Ô∏è Security Rules (40+ rules total)
            - üéØ MITRE ATT&CK Mappings
            - ‚úÖ Compliance Tags (PCI-DSS, GDPR, HIPAA)
            - üß™ Testing Tools
            
            ### Decoders
            - `mikrotik-json-decoder.xml` - Dynamic field extraction for MikroTik logs
            - `esxi-json-decoder.xml` - Dynamic field extraction for ESXi logs
            
            ### Rules
            **MikroTik (20+ rules):**
            - Authentication (login failures, brute force)
            - User management (add, remove, password changes)
            - Firewall rule changes
            - VPN activity monitoring
            - Rogue DHCP detection
            
            **ESXi (20+ rules):**
            - SSH authentication failures
            - VM operations (create, delete, power)
            - Account management
            - File operations
            - Cryptomining detection
            
            ### Installation
            ```bash
            # Deploy decoders
            docker cp wazuh-manager/config/decoders/*.xml wazuh-manager:/var/ossec/etc/decoders/
            
            # Deploy rules
            docker cp wazuh-manager/config/rules/*.xml wazuh-manager:/var/ossec/etc/rules/
            
            # Restart Wazuh Manager
            docker exec wazuh-manager /var/ossec/bin/wazuh-control restart
            ```
            
            ### Testing
            ```bash
            cd wazuh-manager
            ./test-rules.sh validate
            ./test-rules.sh quick
            ```
            
            ### Download
            
            **Configuration Package:**
            - `wazuh-manager-configs-v${{ steps.bump_version.outputs.new_version }}.tar.gz` - All configs, decoders, rules, and testing tools
            - `wazuh-manager-configs-v${{ steps.bump_version.outputs.new_version }}.tar.gz.sha256` - Checksum for verification
            
            ```bash
            # Download and extract
            wget https://github.com/${{ github.repository }}/releases/download/wazuh-manager-v${{ steps.bump_version.outputs.new_version }}/wazuh-manager-configs-v${{ steps.bump_version.outputs.new_version }}.tar.gz
            tar -xzf wazuh-manager-configs-v${{ steps.bump_version.outputs.new_version }}.tar.gz
            
            # Verify checksum
            sha256sum -c wazuh-manager-configs-v${{ steps.bump_version.outputs.new_version }}.tar.gz.sha256
            ```
            
            ### Changes
            See [wazuh-manager/CHANGELOG.md](wazuh-manager/CHANGELOG.md) for details.
          files: |
            wazuh-manager/wazuh-manager-configs-v${{ steps.bump_version.outputs.new_version }}.tar.gz
            wazuh-manager/wazuh-manager-configs-v${{ steps.bump_version.outputs.new_version }}.tar.gz.sha256
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
